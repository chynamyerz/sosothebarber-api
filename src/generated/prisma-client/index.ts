// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/
import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";
export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];
export type Maybe<T> = T | undefined | null;
export interface Exists {
  booking: (where?: BookingWhereInput) => Promise<boolean>;
  cut: (where?: CutWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}
export interface Node {}
export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;
export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}
export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  /**
   * Queries
   */
  booking: (where: BookingWhereUniqueInput) => BookingNullablePromise;
  bookings: (args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Booking>;
  bookingsConnection: (args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BookingConnectionPromise;
  cut: (where: CutWhereUniqueInput) => CutNullablePromise;
  cuts: (args?: {
    where?: CutWhereInput;
    orderBy?: CutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cut>;
  cutsConnection: (args?: {
    where?: CutWhereInput;
    orderBy?: CutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CutConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;
  /**
   * Mutations
   */
  createBooking: (data: BookingCreateInput) => BookingPromise;
  updateBooking: (args: {
    data: BookingUpdateInput;
    where: BookingWhereUniqueInput;
  }) => BookingPromise;
  updateManyBookings: (args: {
    data: BookingUpdateManyMutationInput;
    where?: BookingWhereInput;
  }) => BatchPayloadPromise;
  upsertBooking: (args: {
    where: BookingWhereUniqueInput;
    create: BookingCreateInput;
    update: BookingUpdateInput;
  }) => BookingPromise;
  deleteBooking: (where: BookingWhereUniqueInput) => BookingPromise;
  deleteManyBookings: (where?: BookingWhereInput) => BatchPayloadPromise;
  createCut: (data: CutCreateInput) => CutPromise;
  updateCut: (args: {
    data: CutUpdateInput;
    where: CutWhereUniqueInput;
  }) => CutPromise;
  updateManyCuts: (args: {
    data: CutUpdateManyMutationInput;
    where?: CutWhereInput;
  }) => BatchPayloadPromise;
  upsertCut: (args: {
    where: CutWhereUniqueInput;
    create: CutCreateInput;
    update: CutUpdateInput;
  }) => CutPromise;
  deleteCut: (where: CutWhereUniqueInput) => CutPromise;
  deleteManyCuts: (where?: CutWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  /**
   * Subscriptions
   */
  $subscribe: Subscription;
}
export interface Subscription {
  booking: (
    where?: BookingSubscriptionWhereInput
  ) => BookingSubscriptionPayloadSubscription;
  cut: (
    where?: CutSubscriptionWhereInput
  ) => CutSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}
export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}
/**
 * Types
 */
export type Role = "ADMIN";
export type BookingStatus = "ACTIVE" | "DONE" | "CANCELLED" | "PENDING";
export type BookingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "time_ASC"
  | "time_DESC"
  | "status_ASC"
  | "status_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";
export type CutOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "image_ASC"
  | "image_DESC"
  | "price_ASC"
  | "price_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";
export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "displayName_ASC"
  | "displayName_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "password_ASC"
  | "password_DESC"
  | "oneTimePin_ASC"
  | "oneTimePin_DESC"
  | "role_ASC"
  | "role_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";
export type MutationType = "CREATED" | "UPDATED" | "DELETED";
export type BookingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;
export interface BookingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cut?: Maybe<CutWhereInput>;
  user?: Maybe<UserWhereInput>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  time_not?: Maybe<DateTimeInput>;
  time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_lt?: Maybe<DateTimeInput>;
  time_lte?: Maybe<DateTimeInput>;
  time_gt?: Maybe<DateTimeInput>;
  time_gte?: Maybe<DateTimeInput>;
  status?: Maybe<BookingStatus>;
  status_not?: Maybe<BookingStatus>;
  status_in?: Maybe<BookingStatus[] | BookingStatus>;
  status_not_in?: Maybe<BookingStatus[] | BookingStatus>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BookingWhereInput[] | BookingWhereInput>;
  OR?: Maybe<BookingWhereInput[] | BookingWhereInput>;
  NOT?: Maybe<BookingWhereInput[] | BookingWhereInput>;
}
export interface CutWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CutWhereInput[] | CutWhereInput>;
  OR?: Maybe<CutWhereInput[] | CutWhereInput>;
  NOT?: Maybe<CutWhereInput[] | CutWhereInput>;
}
export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  displayName?: Maybe<String>;
  displayName_not?: Maybe<String>;
  displayName_in?: Maybe<String[] | String>;
  displayName_not_in?: Maybe<String[] | String>;
  displayName_lt?: Maybe<String>;
  displayName_lte?: Maybe<String>;
  displayName_gt?: Maybe<String>;
  displayName_gte?: Maybe<String>;
  displayName_contains?: Maybe<String>;
  displayName_not_contains?: Maybe<String>;
  displayName_starts_with?: Maybe<String>;
  displayName_not_starts_with?: Maybe<String>;
  displayName_ends_with?: Maybe<String>;
  displayName_not_ends_with?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  bookings_every?: Maybe<BookingWhereInput>;
  bookings_some?: Maybe<BookingWhereInput>;
  bookings_none?: Maybe<BookingWhereInput>;
  oneTimePin?: Maybe<String>;
  oneTimePin_not?: Maybe<String>;
  oneTimePin_in?: Maybe<String[] | String>;
  oneTimePin_not_in?: Maybe<String[] | String>;
  oneTimePin_lt?: Maybe<String>;
  oneTimePin_lte?: Maybe<String>;
  oneTimePin_gt?: Maybe<String>;
  oneTimePin_gte?: Maybe<String>;
  oneTimePin_contains?: Maybe<String>;
  oneTimePin_not_contains?: Maybe<String>;
  oneTimePin_starts_with?: Maybe<String>;
  oneTimePin_not_starts_with?: Maybe<String>;
  oneTimePin_ends_with?: Maybe<String>;
  oneTimePin_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  resetTokenExpiry_not?: Maybe<DateTimeInput>;
  resetTokenExpiry_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  resetTokenExpiry_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  resetTokenExpiry_lt?: Maybe<DateTimeInput>;
  resetTokenExpiry_lte?: Maybe<DateTimeInput>;
  resetTokenExpiry_gt?: Maybe<DateTimeInput>;
  resetTokenExpiry_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}
export type CutWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;
export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;
export interface BookingCreateInput {
  id?: Maybe<ID_Input>;
  cut: CutCreateOneInput;
  user: UserCreateOneWithoutBookingsInput;
  date: DateTimeInput;
  time: DateTimeInput;
  status: BookingStatus;
}
export interface CutCreateOneInput {
  create?: Maybe<CutCreateInput>;
  connect?: Maybe<CutWhereUniqueInput>;
}
export interface CutCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  image: String;
  price: Int;
}
export interface UserCreateOneWithoutBookingsInput {
  create?: Maybe<UserCreateWithoutBookingsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}
export interface UserCreateWithoutBookingsInput {
  id?: Maybe<ID_Input>;
  email: String;
  displayName: String;
  phoneNumber: String;
  password: String;
  oneTimePin?: Maybe<String>;
  role?: Maybe<Role>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
}
export interface BookingUpdateInput {
  cut?: Maybe<CutUpdateOneRequiredInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutBookingsInput>;
  date?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  status?: Maybe<BookingStatus>;
}
export interface CutUpdateOneRequiredInput {
  create?: Maybe<CutCreateInput>;
  update?: Maybe<CutUpdateDataInput>;
  upsert?: Maybe<CutUpsertNestedInput>;
  connect?: Maybe<CutWhereUniqueInput>;
}
export interface CutUpdateDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  price?: Maybe<Int>;
}
export interface CutUpsertNestedInput {
  update: CutUpdateDataInput;
  create: CutCreateInput;
}
export interface UserUpdateOneRequiredWithoutBookingsInput {
  create?: Maybe<UserCreateWithoutBookingsInput>;
  update?: Maybe<UserUpdateWithoutBookingsDataInput>;
  upsert?: Maybe<UserUpsertWithoutBookingsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}
export interface UserUpdateWithoutBookingsDataInput {
  email?: Maybe<String>;
  displayName?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  password?: Maybe<String>;
  oneTimePin?: Maybe<String>;
  role?: Maybe<Role>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
}
export interface UserUpsertWithoutBookingsInput {
  update: UserUpdateWithoutBookingsDataInput;
  create: UserCreateWithoutBookingsInput;
}
export interface BookingUpdateManyMutationInput {
  date?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  status?: Maybe<BookingStatus>;
}
export interface CutUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  price?: Maybe<Int>;
}
export interface CutUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  price?: Maybe<Int>;
}
export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  displayName: String;
  phoneNumber: String;
  password: String;
  bookings?: Maybe<BookingCreateManyWithoutUserInput>;
  oneTimePin?: Maybe<String>;
  role?: Maybe<Role>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
}
export interface BookingCreateManyWithoutUserInput {
  create?: Maybe<
    BookingCreateWithoutUserInput[] | BookingCreateWithoutUserInput
  >;
  connect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
}
export interface BookingCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  cut: CutCreateOneInput;
  date: DateTimeInput;
  time: DateTimeInput;
  status: BookingStatus;
}
export interface UserUpdateInput {
  email?: Maybe<String>;
  displayName?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  password?: Maybe<String>;
  bookings?: Maybe<BookingUpdateManyWithoutUserInput>;
  oneTimePin?: Maybe<String>;
  role?: Maybe<Role>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
}
export interface BookingUpdateManyWithoutUserInput {
  create?: Maybe<
    BookingCreateWithoutUserInput[] | BookingCreateWithoutUserInput
  >;
  delete?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  connect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  set?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  disconnect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  update?: Maybe<
    | BookingUpdateWithWhereUniqueWithoutUserInput[]
    | BookingUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | BookingUpsertWithWhereUniqueWithoutUserInput[]
    | BookingUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
  updateMany?: Maybe<
    | BookingUpdateManyWithWhereNestedInput[]
    | BookingUpdateManyWithWhereNestedInput
  >;
}
export interface BookingUpdateWithWhereUniqueWithoutUserInput {
  where: BookingWhereUniqueInput;
  data: BookingUpdateWithoutUserDataInput;
}
export interface BookingUpdateWithoutUserDataInput {
  cut?: Maybe<CutUpdateOneRequiredInput>;
  date?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  status?: Maybe<BookingStatus>;
}
export interface BookingUpsertWithWhereUniqueWithoutUserInput {
  where: BookingWhereUniqueInput;
  update: BookingUpdateWithoutUserDataInput;
  create: BookingCreateWithoutUserInput;
}
export interface BookingScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  time_not?: Maybe<DateTimeInput>;
  time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_lt?: Maybe<DateTimeInput>;
  time_lte?: Maybe<DateTimeInput>;
  time_gt?: Maybe<DateTimeInput>;
  time_gte?: Maybe<DateTimeInput>;
  status?: Maybe<BookingStatus>;
  status_not?: Maybe<BookingStatus>;
  status_in?: Maybe<BookingStatus[] | BookingStatus>;
  status_not_in?: Maybe<BookingStatus[] | BookingStatus>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
  OR?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
  NOT?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
}
export interface BookingUpdateManyWithWhereNestedInput {
  where: BookingScalarWhereInput;
  data: BookingUpdateManyDataInput;
}
export interface BookingUpdateManyDataInput {
  date?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  status?: Maybe<BookingStatus>;
}
export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  displayName?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  password?: Maybe<String>;
  oneTimePin?: Maybe<String>;
  role?: Maybe<Role>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
}
export interface BookingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BookingWhereInput>;
  AND?: Maybe<BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput>;
  OR?: Maybe<BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput>;
  NOT?: Maybe<BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput>;
}
export interface CutSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CutWhereInput>;
  AND?: Maybe<CutSubscriptionWhereInput[] | CutSubscriptionWhereInput>;
  OR?: Maybe<CutSubscriptionWhereInput[] | CutSubscriptionWhereInput>;
  NOT?: Maybe<CutSubscriptionWhereInput[] | CutSubscriptionWhereInput>;
}
export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}
export interface NodeNode {
  id: ID_Output;
}
export interface Booking {
  id: ID_Output;
  date: DateTimeOutput;
  time: DateTimeOutput;
  status: BookingStatus;
  updatedAt?: DateTimeOutput;
  createdAt?: DateTimeOutput;
}
export interface BookingPromise extends Promise<Booking>, Fragmentable {
  id: () => Promise<ID_Output>;
  cut: <T = CutPromise>() => T;
  user: <T = UserPromise>() => T;
  date: () => Promise<DateTimeOutput>;
  time: () => Promise<DateTimeOutput>;
  status: () => Promise<BookingStatus>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}
export interface BookingSubscription
  extends Promise<AsyncIterator<Booking>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cut: <T = CutSubscription>() => T;
  user: <T = UserSubscription>() => T;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<BookingStatus>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}
export interface BookingNullablePromise
  extends Promise<Booking | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cut: <T = CutPromise>() => T;
  user: <T = UserPromise>() => T;
  date: () => Promise<DateTimeOutput>;
  time: () => Promise<DateTimeOutput>;
  status: () => Promise<BookingStatus>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}
export interface Cut {
  id: ID_Output;
  title: String;
  description: String;
  image: String;
  price: Int;
  updatedAt?: DateTimeOutput;
  createdAt?: DateTimeOutput;
}
export interface CutPromise extends Promise<Cut>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  price: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}
export interface CutSubscription
  extends Promise<AsyncIterator<Cut>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}
export interface CutNullablePromise extends Promise<Cut | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  price: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}
export interface User {
  id: ID_Output;
  email: String;
  displayName: String;
  phoneNumber: String;
  password: String;
  oneTimePin?: String;
  role?: Role;
  resetTokenExpiry?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  createdAt?: DateTimeOutput;
}
export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  displayName: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  password: () => Promise<String>;
  bookings: <T = FragmentableArray<Booking>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  oneTimePin: () => Promise<String>;
  role: () => Promise<Role>;
  resetTokenExpiry: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}
export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  displayName: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  bookings: <T = Promise<AsyncIterator<BookingSubscription>>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  oneTimePin: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  resetTokenExpiry: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}
export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  displayName: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  password: () => Promise<String>;
  bookings: <T = FragmentableArray<Booking>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  oneTimePin: () => Promise<String>;
  role: () => Promise<Role>;
  resetTokenExpiry: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}
export interface BookingConnection {
  pageInfo: PageInfo;
  edges: BookingEdge[];
}
export interface BookingConnectionPromise
  extends Promise<BookingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookingEdge>>() => T;
  aggregate: <T = AggregateBookingPromise>() => T;
}
export interface BookingConnectionSubscription
  extends Promise<AsyncIterator<BookingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookingSubscription>() => T;
}
export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}
export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}
export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}
export interface BookingEdge {
  node: Booking;
  cursor: String;
}
export interface BookingEdgePromise extends Promise<BookingEdge>, Fragmentable {
  node: <T = BookingPromise>() => T;
  cursor: () => Promise<String>;
}
export interface BookingEdgeSubscription
  extends Promise<AsyncIterator<BookingEdge>>,
    Fragmentable {
  node: <T = BookingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}
export interface AggregateBooking {
  count: Int;
}
export interface AggregateBookingPromise
  extends Promise<AggregateBooking>,
    Fragmentable {
  count: () => Promise<Int>;
}
export interface AggregateBookingSubscription
  extends Promise<AsyncIterator<AggregateBooking>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}
export interface CutConnection {
  pageInfo: PageInfo;
  edges: CutEdge[];
}
export interface CutConnectionPromise
  extends Promise<CutConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CutEdge>>() => T;
  aggregate: <T = AggregateCutPromise>() => T;
}
export interface CutConnectionSubscription
  extends Promise<AsyncIterator<CutConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CutEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCutSubscription>() => T;
}
export interface CutEdge {
  node: Cut;
  cursor: String;
}
export interface CutEdgePromise extends Promise<CutEdge>, Fragmentable {
  node: <T = CutPromise>() => T;
  cursor: () => Promise<String>;
}
export interface CutEdgeSubscription
  extends Promise<AsyncIterator<CutEdge>>,
    Fragmentable {
  node: <T = CutSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}
export interface AggregateCut {
  count: Int;
}
export interface AggregateCutPromise
  extends Promise<AggregateCut>,
    Fragmentable {
  count: () => Promise<Int>;
}
export interface AggregateCutSubscription
  extends Promise<AsyncIterator<AggregateCut>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}
export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}
export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}
export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}
export interface UserEdge {
  node: User;
  cursor: String;
}
export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}
export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}
export interface AggregateUser {
  count: Int;
}
export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}
export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}
export interface BatchPayload {
  count: Long;
}
export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}
export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}
export interface BookingSubscriptionPayload {
  mutation: MutationType;
  node: Booking;
  updatedFields: String[];
  previousValues: BookingPreviousValues;
}
export interface BookingSubscriptionPayloadPromise
  extends Promise<BookingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookingPreviousValuesPromise>() => T;
}
export interface BookingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookingPreviousValuesSubscription>() => T;
}
export interface BookingPreviousValues {
  id: ID_Output;
  date: DateTimeOutput;
  time: DateTimeOutput;
  status: BookingStatus;
  updatedAt?: DateTimeOutput;
  createdAt?: DateTimeOutput;
}
export interface BookingPreviousValuesPromise
  extends Promise<BookingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  time: () => Promise<DateTimeOutput>;
  status: () => Promise<BookingStatus>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}
export interface BookingPreviousValuesSubscription
  extends Promise<AsyncIterator<BookingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<BookingStatus>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}
export interface CutSubscriptionPayload {
  mutation: MutationType;
  node: Cut;
  updatedFields: String[];
  previousValues: CutPreviousValues;
}
export interface CutSubscriptionPayloadPromise
  extends Promise<CutSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CutPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CutPreviousValuesPromise>() => T;
}
export interface CutSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CutSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CutSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CutPreviousValuesSubscription>() => T;
}
export interface CutPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  image: String;
  price: Int;
  updatedAt?: DateTimeOutput;
  createdAt?: DateTimeOutput;
}
export interface CutPreviousValuesPromise
  extends Promise<CutPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  price: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}
export interface CutPreviousValuesSubscription
  extends Promise<AsyncIterator<CutPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}
export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}
export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}
export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}
export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  displayName: String;
  phoneNumber: String;
  password: String;
  oneTimePin?: String;
  role?: Role;
  resetTokenExpiry?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  createdAt?: DateTimeOutput;
}
export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  displayName: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  password: () => Promise<String>;
  oneTimePin: () => Promise<String>;
  role: () => Promise<Role>;
  resetTokenExpiry: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}
export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  displayName: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  oneTimePin: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  resetTokenExpiry: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}
/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;
/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;
/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;
/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;
/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;
/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;
export type Long = string;
/**
 * Model Metadata
 */
export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Cut",
    embedded: false
  },
  {
    name: "Booking",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "BookingStatus",
    embedded: false
  }
];
/**
 * Type Defs
 */
export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["SOSO_PRISMA_ENDPOINT_DEV"]}`
});
export const prisma = new Prisma();
